 n = int(input("Enter a number: "))
f1 = 0
f2 = 1

if n <= 1:
    print(n)
else:
    print(f1)
    print(f2)
    for i in range(2, n):
        f3 = f1 + f2
        print(f3)
        f1 = f2
        f2 = f3







def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)


nterms = int(input("Enter number of terms: "))
if(nterms <= 0):
    print("Enter a positive integer: ")
else:
    print("Fibonnaci Series: ")
    for i in range(nterms):
        print(fibonacci(i))










def knapSack(W, wt, val, n):
    dp = [0 for i in range(W + 1)]  # Making the dp array

    for i in range(1, n + 1):  # taking first i elements
        for w in range(W, 0, -1):  # starting from back,so that we also have data of
            # previous computation when taking i-1 items
            if wt[i - 1] <= w:
                # finding the maximum value
                dp[w] = max(dp[w], dp[w - wt[i - 1]] + val[i - 1])

    return dp[W]  # returning the maximum value of knapsack


# Driver code
val = [60, 100, 120]
wt = [10, 20, 30]
W = 50
n = len(val)
print("Max value is: ", knapSack(W, wt, val, n))












class Item:
    def _init_(self, value, weight):
        self.value = value
        self.weight = weight

def fractionalKnapsack(W, arr):
        arr.sort(key=lambda x: (x.value / x.weight), reverse=True)
        finalValue = 0.0

        for item in arr:

            if item.weight <= W:
                W -= item.weight
                finalValue += item.value

            else:
                finalValue += item.value * W / item.weight
                break

        return finalValue



W = 50
arr = [Item(60, 10), Item(100, 20), Item(120, 30)]
max_val = fractionalKnapsack(W, arr)

print("Max Value of the Capacity is: ", max_val)